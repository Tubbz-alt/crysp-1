import pytest
import codecs
from crysp.keccak import *

# testing standard Keccak Sponge:
# -------------------------------

# test case obtained by running KeccakReferenceandOptimized
# see output 'KeccakSpongeIntermediateValues_r1024c576.txt'
# input message (bitlen 29)

def test_keccak_001():
    h = Keccak(r=1024,c=576)
    m1 = b"\x53\x58\x7b\xc8"
    # test message-to-blocks iterator
    blks = []
    for b in h.iterblocks(m1,bitlen=29):
        assert len(b)==1024
        blks.append(b)
    assert len(blks)==1
    # check 10*1 padding (when bitlen not a multiple of 8)
    assert blks[0][:32] == 0x397b5853
    assert blks[0][-1] == 1
    assert blks[0][33:-1] == 0

# test some big digest values:
def test_keccak_002():
    h = Keccak(r=1024,c=576)
    h.outlen = 4096
    assert h(b'\xc0',bitlen=2) == codecs.decode(b"BD1DAED8990F6277D3531AD6379C2B55C7B48364F6A936C7EFEED7DD5D6A2B954DD4212389134778C3D522C623444FB49A92CAE135EA071852B0175A9E6D4B4EE0A4022BD35F07F8BF1F558189377B1E72937EBFA6FA45FCBF8680A1D5F1C0E392A7DFAC13A4D0CA4057C10BBAE9277D06E78299D153AC71102CAFCE655F23FACED1EF896CCD0074D2BED8DD1137A750C654BDC89092EAE0C5D934E76E07F517D3020FEBD5103FCECA0999E2585823ADEDE5ED44B053FD7BADA35E065561451F096C2ADEAAFFF03E9EAFBBD6F57EEF3568E218E792B146362CAF1A400AA3D7E1707E700FB8B895B2CA0A7E7BC0521D8A51317CD05EB11E81B9868FB74F95BD1F9795857B9B4ABBEF137F95A587EF287F121FC0550A93ED6FBA7C7252DD8E81B2D6FCCB53C8ED4AA1177D09FC2C106B6CD346A46FAB567289A6CD427FA4A8B85375F109FA078E415D57683475DF000A2C306C6EBE15107E3BD1DAC2BA8020144B353534B66B7C0232086F849AF91A30459EE28BFAC3B02F4B042889C5334FBA60C5D962D22ACFAAB5AA7ABDFCB31ED87CB799C3EA8715BC5F5F438E7A8C8EEBE20F89AD73247768633B5C3272CD3345066472C353EA95DAE01581F5BF0CBE1B7DC8442A60C09DE546835A5A4B0A40E0B1DF09F280073571F8B0DB09D8CB1D38DCC395A9031012A7FB25D87E61E082A63F8BC8392B3827C6E674D97291737ECB94",'hex')

def test_keccak_003():
    h = Keccak(r=1024,c=576,len=4096)
    m1 = b"\x53\x58\x7b\xc8"
    assert h(m1,bitlen=29) == codecs.decode(bhex')

def test_keccak_004():
# test sponge with longer input message:
    h = Keccak(r=1024,c=576,len=4096)
    m2 = codecs.decode(b"83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC7EC6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699DF35D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5D397FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D13437095707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A07484A5D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1",'hex')
    assert h(m2,bitlen=2008) == codecs.decode(bhex')

# test sponge with another capacity value:
def test_keccak_005():
    h2 = Keccak(r=1344,c=256,len=4096)
    assert h2(b'',bitlen=0) == codecs.decode(b"BCF56AC882AD981CD0FA74F0F397572C28801C1EB31C1BAC4CA703D6F19E9419D693BA6C2B55EFBF139777FA6BED9421506F9F27D462E7AACFF3202A88CA23895265C9AF63C4B0244CF3311F3F2839D7A86B94C8B951DF8B348C9C46FB6AF99BA560CF8CA75DC0389E1CFA52347D021FF95AFA282A3FC12537CB23F31933F018F48645191F95FD044FAF3822A399C9FF23639DB8E1D31D0B588F4E0607C90D6711724282BC9C7E68470DE2068A4D5F4EE9E78F0161B0DD01D2FCDE5C9E0E046C435B580AE631F8F16163A630EAE06079D72DA0E5CBA9C7DB9B48DAC57BD2D4E9F9328D6545C356CAFB4ED136151D4B45618D232BDA2721CAB30C9F7008ABBD705B3EE0C08EDE7FCBEEB427A5F3852BFF3586E58FDEDE3FE6036CDCB08EA1B1C1C3B7C1549F3E41477245D8686C312D6D9C71EDB983D3B05AA0645A6B797067B3FA1AAA2ED9B039A427396DA679AB245705C2B901EFE220F659FBDD4E7D2B6CE91E18FEAD0BCAE96F3EE021CCF9E6854B6E64BA58029622255B120684B44C6EF22BC9BC8C28C2B322805C38BEAFAC6B39C8A235525F53A057891E8313950D09C03F54865D6C672C6B73486587E4EBC7D84764FDBA4DC4845A2145C3ECB9925181A6DC4580D049553FC8C7E35CFA22688D992B80CD6D92AEC28EA2CE810D2F37B02AB00DAE1940DE8602B98FE36ACC651B502F11346D3233000AF0E0C6041A1BCA",'hex')

# Compact Keccak Sponge tests:
# ----------------------------
def test_keccak_006():
    h3 = Keccak(r=512,c=288,len=512)
    assert h3(b'\x48',bitlen=5) == codecs.decode(b"BF4D7E53D63D9FEB016FCD2FE2F38DEB3A1435FE40C226C495C28820F82BE568B7ABC7FF750571B23E714B66BD1DFA4B0D0E23856D40875C6E5BE50831F6BB35",'hex')

def test_keccak_007():
    h4 = Keccak(b=200,r=40,len=160)
    #Len = 43
    #Msg = F219BD629820
    #Squeezed = C8F9476DBF0B0FE01F80629FD5689097AAAC6732
    assert h4.c == 160
    assert h4(codecs.decode(b"F219BD629820",'hex'),bitlen=43) == codecs.decode(b"C8F9476DBF0B0FE01F80629FD5689097AAAC6732",'hex')

# Duplex construction tests:
# --------------------------
def test_keccak_008():
    h5 = Keccak(b=1600,r=1027,outlen=1027)
    # test padding (WARNING: Duplex construction does not follow NIST bitorder convention !? WTF...)
    m123 = codecs.decode(b"8931A38DFEDEFEDC2F3E0A7C0390E604",'hex')
    blks = []
    for b in h5.iterblocks(m123,bitlen=123):
        assert len(b)==1027
        blks.append(b)
    assert len(blks)==1
    assert blks[0][123] == 1
    assert blks[0][-1] == 1
    assert h5.duplex(b'',bitlen=0) == codecs.decode("E6F80B3637E0F7D50F4CD36C3A293AD320205E2187AC60CA9A24E26B5104931C3FB2897BA0FEDD529099CBA8625EFC73879C28DA8C1D09CD9282662C3844825F93C05E5A7C00313DC95C6613C42484A5CC298CE493607DBE80328FE176CC86376678572888E411196C82118183E59434B7D3AD5A92168BFCC3602DAD16735B5C06",'hex')
    assert h5.duplex(b'\x00',bitlen=1) == codecs.decode("A4AC5C6E75D41EAFAA6B9E261FFBC14DABD73C31044C7822CE5DBF37DE03995CBA565107F2C86E35260BEED3F83DC577CE499C43F4F916D4605673ED827F52C95E63EC69E2D3C6428327B9DDA1DB4F5EA5579EB96F73C83BB167345561BE2E7AF35C8050639866373372F7DE4B9AA8BC0131B3A8BCF53F8299B26BF44C26C18E03",'hex')
    assert h5.duplex(b'\x03',bitlen=2) == codecs.decode("F8B98D98CE69529838CDCDC76BEC0A88F61FD229828CC227B8EAD5A000467FCC3708510A50A65F2060BCBDF32672A876B7C1BBD6519208D5852A2972CEC57A52321C469419BBC6FAD0DBCC9FC56D1C6BACA421F67FEFD4AA26410A048417AE7CD8DD19C0679E19F160AA8DA51AE29C42C59E2BAFC5A699095050EAB008C3959A01",'hex')

# SHA-3 proposal tests:
# ---------------------
#Len = 2111
#Msg = 919FE5E7F35F64A7487649E564771DBBF10AE204ECC2181312D1A79FB579297C94F0DB9EAAE9E009A4F02057AF2C973C5DAFA7B60154371A5D2C8E992FB6429176F8424B1A866BC1D1BED00438E97FAB42040DCACDEF7CA9FC2033059B8898BB40CCFB2634B051797BDF3B915C503EC81839AD01E0F4F2F871EFF2008D40011730BE7A47888E7955A806876BE120CB0F3A139A3620154ECC6482A70F5629F6A9D3341BE6FBBF48E5AA0C53589A04F057DD44268AFFCABF75ADFC549F73F454264D46A98CCA80E3000C7446853DD5B430C9344E87E3230555B09FB3E7E64B5AD3989293AC0FEEC0E75F909696F028A5525D26DDEA5D2B2C813FB3613DFF38CE23209285CC77C60860
#MD = 4A1B83F269251D71E1B4D65533795992CBE4F2501AE84901F41E9325492F962FA95D49D8676B017FC7C3711775ECDEEA8B22E0D7DDA67BC926B83D9DC425CE30
def test_keccak_512():
    assert keccak_512(codecs.decode(b"919FE5E7F35F64A7487649E564771DBBF10AE204ECC2181312D1A79FB579297C94F0DB9EAAE9E009A4F02057AF2C973C5DAFA7B60154371A5D2C8E992FB6429176F8424B1A866BC1D1BED00438E97FAB42040DCACDEF7CA9FC2033059B8898BB40CCFB2634B051797BDF3B915C503EC81839AD01E0F4F2F871EFF2008D40011730BE7A47888E7955A806876BE120CB0F3A139A3620154ECC6482A70F5629F6A9D3341BE6FBBF48E5AA0C53589A04F057DD44268AFFCABF75ADFC549F73F454264D46A98CCA80E3000C7446853DD5B430C9344E87E3230555B09FB3E7E64B5AD3989293AC0FEEC0E75F909696F028A5525D26DDEA5D2B2C813FB3613DFF38CE23209285CC77C60860",'hex'),bitlen=2111) == codecs.decode("4A1B83F269251D71E1B4D65533795992CBE4F2501AE84901F41E9325492F962FA95D49D8676B017FC7C3711775ECDEEA8B22E0D7DDA67BC926B83D9DC425CE30",'hex')


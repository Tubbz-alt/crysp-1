import pytest
import codecs
from crysp.tlsh import *

t0 = b'The best documentation is the UNIX source. After all, this is what the system uses for documentation when it decides what to do next! The manuals paraphrase the source code, often having been written at different times and by different people than who wrote the code. Think of them as guidelines. Sometimes they are more like wishes... Nonetheless, it is all too common to turn to the source and find options and behaviors that are not documented in the manual. Sometimes you find options described in the manual that are unimplemented and ignored by the source.\n'

t1 = b"""This is a test for Jon Oliver. This is a string. Hello Hello Hello

t2 = b"""This is a test for Lili Diao. This is a string. Hello Hello Hello OPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ\0"""


vectors_2 = [(t0, b"1EF02BEF718027B0160B4391212923ED7F1A463D563B1549B86CF62973B197AD2731F8"),
             (t1, b"301124198C869A5A4F0F9380A9AE92F2B9278F42089EA34272885F0FB2D34E6911444C"),
             (t2, b"09F05A198CC69A5A4F0F9380A9EE93F2B927CF42089EA74276DC5F0BB2D34E68114448"),
            ]
@pytest.mark.parametrize('m,h',vectors_2)
def test_tlsh_001(m,h):
    x = codecs.decode(h,'hex')
    assert tlsh(m) == x
    tlsh.reset()
    assert tlsh.from_hash(x).digest().lsh_code == x

def test_tlsh_002():
    h1 = tlsh(t1)
    h2 = tlsh(t2)
    assert distance(h1,h2)==121
    assert distance(h1,h2,False)==97

def test_tlsh_003():
    H1 = TLSH(128).final(t1).digest()
    H2 = TLSH(128).final(t2).digest()
    h1 = H1.lsh_code
    h2 = H2.lsh_code
    assert distance(H1,H2)==121
    assert distance(h1,H2)==121
    assert distance(H1,h2)==121
    assert distance(h1,h2,False)==97
